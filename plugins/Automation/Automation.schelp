class:: Automation
summary:: a multi-segment easing function
categories:: UGens>Envelopes

description::

Automation is a UGen for evaluating a piecewise function defined by a number of breakpoints and easing functions to transition between those breakpoints. It takes as input N + 1 values, N segment durations, and N "easing functions" (linear, stepped, curved, etc), and a single "time" parameter that controls at which point the function is evaluated.

The intended application of Automation is to permit the parametric definition of complex oscillator waveforms with modulated breakpoints. As such, the segment durations are normalized so that the first segment starts at 0 and the last segment ends at 1. If "time" is outside the range [0, 1], Automation simply extends the first or last input value.

It is similar to IEnvGen but improves on the latter in two ways: all parameters can be modulated at audio rate, and provides a set of easing functions much more extensive than Env's default curve parameters. Automation is completely stateless and the current sample of output only depends instantaneously on the current samples of its inputs.

section:: Easing functions

Most easing functions have three different modes: "in," "out," and "in-out." These names come from computer graphics and follow the same conventions as computer graphics (see for example easings.net). For most smoothly curved easing functions, "in" means that the easing function begins slow and ends fast, "out" means that it begins fast and ends slow, and "in-out" begins and ends slow with an inflection point halfway in between. For "linear," the three modes are identical and therefore redundant, so the lone linear easing function is simply called "linear", for all others, the names are in lower camel case with the mode as a suffix: quadraticIn, quadraticOut, quadraticInOut.

To get the full list of easing functions with suffixes, run code:: Automation.easingFunctions ::. The list is as follows:

list::
## code:: linear :: : linear interpolation. Again, this one doesn't have any In/Out/InOut suffix, but all others do.
## code:: step :: : code:: stepIn :: holds the first value, code:: stepOut :: holds the second value, code:: stepInOut :: switches between the first and second values at the halfway point.
## code:: quadratic, cubic, quartic, quintic :: : derived from power functions.
## code:: sine :: : one quarter of cosine wave.
## code:: pseudoExponential :: : A shifted and scaled segment of an exponential function.
## code:: circular :: : one quarter of a circle.
## code:: elastic1-elastic8 :: : the trajectory of the damped simple harmonic oscillator. There are 8 of these; the number is the number of crossings. Note that the "out" versions (e.g. elastic8Out) are most physically salient as the oscillations decay, whereas in the "in" versions the oscillations grow.
## code:: sinc1-sinc8 :: : a sinc function with a specified number of crossings.
## code:: staircase2-staircase8 :: : equivalent of "linear" but with sample-and-hold. (There is no code:: staircase1 :: because that's just code:: step ::.)
## code:: bounce1-bounce8 :: : the trajectory of a ball in uniform acceleration and undergoing inelastic collision with a surface. The number 1-8 is the number of bounces between the two endpoints. The "out" versions (e.g. code:: bounce8Out ::) make the most physical sense.
::

Note the absence of a true exponential easing function like the code:: \exp :: curve type in SC's Env. There are specific reasons for this. First, this curve type is not actually used as a "curve" but rather to enable linear-ish interpolation in an exponential domain, such as between frequencies expressed in Hertz; it's generally more desirable to compute the envelope in the exponential domain and convert afterwards (e.g. midicps). Second, the exponential curve behaves differently from all other easing functions, as it is not invariant to a constant offset and the two values must be nonzero and have the same sign. When the two values are NOT the same sign, NaNs or infinities may be generated, and for this reason code:: \exp :: is a common source of errors.

In part due to the lack of code:: \exp ::, Automation is guaranteed invariant to any linear function on its values. That is, any function of the form code:: y = mx + b :: applied on all inputs in the code:: values :: array is equivalent to applying that function on the output of the UGen itself.

classmethods::

method::ar

All parameters are internally audio rate. Any control-rate parameters will be automatically upsampled to audio rate using K2A, which performs linear interpolation (with the exception of the easing functions, where a sample-and-hold is performed).

An error is thrown if the array inputs code:: values ::, code:: durations ::, and code:: easingFunctions :: are not arrays or are not consistent in size.

argument::time

The time at which the function is evaluated. Nominally this will range from 0 (beginning of first segment) to 1 (end of last segment). If this is less than 0, then the first value is produced, and if it is greater than 1, the last value is produced.

argument::values

An array of size at least 2 specifying the output values of the function at its breakpoints.

argument::durations

An array of size exactly one less than values, specifying the spacing of the breakpoints. The durations are internally normalized so their sum is 1. If the durations have sum 0, then no normalization takes place; Automation tries to avoid outputting NaNs or infinities unless explicitly entered in the inputs.

argument::easingFunctions

An array of size exactly one less than values, specifying the easing functions between the breakpoints. Easing functions may be specified as symbols, which are internally converted to numeric values by looking them up in code:: Automation.easingFunctions :: . Unrecognized symbols throw an error.

examples::

code::

(
var duration;
duration = 0.05;
{
    Automation.ar(Sweep.ar / duration, [0, 1, 0.5, 0], [1.0, 2.0, 1.0], [\linear, \quadraticOut, \elastic7Out]);
}.plot(duration);
)

::
